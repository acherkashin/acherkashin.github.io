---
interface Props {
	count: number;
}

const { count } = Astro.props;
---

<div id="snow-container" aria-hidden="true">
	{
		new Array(count).fill(0).map((_, index) => (
			<div class="snowflake text-sky-500 dark:text-white">
				<div class="snowflake__inner">
                    {index % 3 === 0 && '❄'}
                    {index % 3 === 1 && '❅'}
                    {index % 3 === 2 && '❆'}
                </div>
			</div>
		))
	}
</div>
<script is:inline defer>
	document.addEventListener('astro:page-load', () => {
		const snowflakes = document.querySelectorAll('.snowflake');

		function getRndInteger(min, max) {
			return Math.floor(Math.random() * (max - min + 1)) + min;
		}

		function getRndFloat(min, max) {
			return (Math.random() * (max - min) + min).toFixed(1);
		}

		snowflakes.forEach((snowflake) => {
			snowflake.style.fontSize = getRndFloat(0.7, 1.5) + 'em';
			snowflake.style.animationDuration = getRndInteger(10, 30) + 's';
			snowflake.style.animationDelay = getRndInteger(-1, snowflakes.length / 4) + 's';
		});
	});
</script>
<style is:global>
	#snow-container {
		position: fixed;
		top: 0;
		left: 0;
		width: 100%;
		height: 100%;
		pointer-events: none;
		display: flex;
		flex-direction: row;
		justify-content: space-between;
	}

	.snowflake {
		position: relative;
		top: -50px;
		font-size: 10px;
		opacity: 0.8;
		animation-name: fall;
		animation-timing-function: ease-in-out;
		animation-iteration-count: infinite;
		will-change: transform;
	}

	.snowflake__inner {
		position: relative;
		animation-name: spin;
		animation-timing-function: linear;
		animation-iteration-count: infinite;
		will-change: transform;
		animation-duration: 10s;
	}

	@keyframes fall {
		from {
			transform: translateY(0);
		}
		to {
			transform: translateY(calc(100vh + 2em));
		}
	}

	@keyframes spin {
		from {
			transform: rotate(0deg);
		}
		to {
			transform: rotate(360deg);
		}
	}
</style>
