---
import Demo from '@/layouts/Demo.astro';
---

<Demo
	head={{
		title: 'Browser Height Limit Test',
		description: 'Interactive of Browser Height Limit Test'
	}}
>
	<style>
		* {
			box-sizing: border-box;
			margin: 0;
			padding: 0;
		}

		body {
			font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
			background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
			min-height: 100vh;
			display: flex;
			align-items: center;
			justify-content: center;
			padding: 20px;
		}

		.container {
			background: white;
			border-radius: 12px;
			box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
			padding: 40px;
			text-align: center;
			max-width: 500px;
			width: 100%;
		}

		h1 {
			font-size: 2em;
			margin-bottom: 10px;
			color: #333;
			font-weight: 300;
		}

		.subtitle {
			color: #666;
			margin-bottom: 30px;
			font-size: 1.1em;
		}

		.test-button {
			background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
			color: white;
			border: none;
			padding: 15px 30px;
			border-radius: 8px;
			cursor: pointer;
			font-size: 16px;
			font-weight: 500;
			transition: all 0.3s ease;
			margin-bottom: 30px;
		}

		.test-button:hover {
			transform: translateY(-2px);
			box-shadow: 0 10px 20px rgba(0, 0, 0, 0.2);
		}

		.test-button:active {
			transform: translateY(0);
		}

		.results {
			background: #f8f9fa;
			border-radius: 8px;
			padding: 20px;
			margin-top: 20px;
			text-align: left;
			display: none;
			border-left: 4px solid #667eea;
		}

		.result-row {
			display: flex;
			justify-content: space-between;
			align-items: center;
			padding: 8px 0;
			border-bottom: 1px solid #e9ecef;
		}

		.result-row:last-child {
			border-bottom: none;
		}

		.result-label {
			font-weight: 500;
			color: #495057;
		}

		.result-value {
			font-family: 'Courier New', monospace;
			color: #667eea;
			font-weight: 600;
		}

		.status {
			margin-top: 15px;
			padding: 10px;
			border-radius: 6px;
			font-weight: 500;
		}

		.status.limited {
			background: #fff3cd;
			color: #856404;
			border: 1px solid #ffeaa7;
		}

		.status.unlimited {
			background: #d4edda;
			color: #155724;
			border: 1px solid #c3e6cb;
		}

		.test-element {
			position: absolute;
			left: -9999px;
			width: 1px;
			opacity: 0;
			pointer-events: none;
		}
	</style>
</Demo>
<body>
	<!-- Permanent test element that stays in DOM -->
	<div id="testElement" class="test-element"></div>

	<div class="container">
		<h1>üîç Browser Height Limit Test</h1>
		<p class="subtitle">Test your browser's maximum element height limitation</p>

		<button class="test-button" onclick="testHeightLimit()"> Test Height Limit </button>

		<div class="results" id="results">
			<div class="result-row">
				<span class="result-label">Requested Height:</span>
				<span class="result-value" id="requestedHeight">-</span>
			</div>
			<div class="result-row">
				<span class="result-label">Actual Height:</span>
				<span class="result-value" id="actualHeight">-</span>
			</div>
			<div class="result-row">
				<span class="result-label">Browser Limit:</span>
				<span class="result-value" id="browserLimit">-</span>
			</div>
			<div class="status" id="status"></div>
		</div>
	</div>

	<script>
		function formatNumber(num: number): string {
			return num.toLocaleString();
		}

		function testHeightLimit(): void {
			// Test with a very large height (50 million pixels)
			const testHeight = 50000000;

			// Use the permanent test element
			const element = document.getElementById('testElement');
			if (!element) {
				console.error('Test element not found');
				return;
			}

			// Set the height
			element.style.height = testHeight + 'px';

			// Force reflow
			element.offsetHeight;

			// Get computed height with fallback for Firefox
			const computedStyle = window.getComputedStyle(element);
			let heightValue = computedStyle.height;

			// If height is 0px or auto, try offsetHeight
			if (heightValue === '0px' || heightValue === 'auto') {
				heightValue = element.offsetHeight + 'px';
			}

			const heightString = heightValue.replace('px', '');
			const actualHeight = Math.round(parseFloat(heightString));

			// Reset the element height
			element.style.height = '1px';

			// Update results
			const requestedHeightEl = document.getElementById('requestedHeight');
			const actualHeightEl = document.getElementById('actualHeight');
			const browserLimitEl = document.getElementById('browserLimit');

			if (requestedHeightEl) {
				requestedHeightEl.textContent = formatNumber(testHeight) + 'px';
			}
			if (actualHeightEl) {
				actualHeightEl.textContent = formatNumber(actualHeight) + 'px';
			}
			if (browserLimitEl) {
				browserLimitEl.textContent = formatNumber(actualHeight) + 'px';
			}

			// Update status
			const statusElement = document.getElementById('status');
			if (statusElement) {
				if (actualHeight < testHeight && actualHeight > 0) {
					statusElement.className = 'status limited';
					statusElement.textContent = `‚ùå Height Limited: Your browser truncates elements larger than ${formatNumber(actualHeight)}px`;
				} else if (actualHeight === 0) {
					statusElement.className = 'status limited';
					statusElement.textContent =
						'‚ö†Ô∏è Could not measure height - browser may have strict limitations';
				} else {
					statusElement.className = 'status unlimited';
					statusElement.textContent =
						'‚úÖ No Height Limitation: Your browser can handle very large heights';
				}
			}

			// Show results
			const resultsElement = document.getElementById('results');
			if (resultsElement) {
				resultsElement.style.display = 'block';
			}
		}

		(window as any).testHeightLimit = testHeightLimit;
	</script>
</Demo>
